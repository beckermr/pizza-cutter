#!/usr/bin/env python
"""
run metadetect on a slice file
"""
import os
import sys
import logging
import tempfile

import click
import yaml

from pizza_cutter.metadetect.run_metadetect import (
    run_metadetect, _get_part_ranges)
from ngmix.medsreaders import MultiBandNGMixMEDS, NGMixMEDS
from pizza_cutter.files import StagedOutFile, expandpath, makedir_fromfile


def _split_range(meds_range):
    """
    Parameters
    ----------
    meds_range: str
        e.g. '3:7' is like a python slice

    Returns
    -------
    start, end_plus_one, num
        Start index, end+1 from the slice, and number to process
    """
    start, end_plus_one = meds_range.split(':')
    start = int(start)
    end_plus_one = int(end_plus_one)
    num = end_plus_one - start  # last element is the end of the range + 1
    return start, end_plus_one, num


def _make_output_filename(meds_fname, part, meds_range):
    """
    make the output name

    Parameters
    ----------
    meds_fname: str
        Example meds file name
    part: int
        The part of the file processed
    meds_range: str
        The slice to process, as as string, e.g. '3:7'

    Returns
    -------
    file basename
    """

    fname = os.path.basename(meds_fname)
    fname = fname.replace('.fz', '').replace('.fits', '')

    # remove the band - always comes after the tilename by convention
    items = fname.split('_')
    fname = '_'.join(items[0:1] + items[2:])

    if part is not None:
        tail = '-metadetect-output-part%04d.fits' % part
    else:
        start, end_plus_one, num = _split_range(meds_range)
        end = end_plus_one - 1
        tail = '-metadetect-output-%04d-%04d.fits' % (start, end)

    return fname + tail


@click.command()
@click.argument('meds_files', nargs=-1)
@click.option(
    '--config', default=None, type=str,
    help='configuration file',
    required=True)
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the outputs')
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG',
    required=True)
@click.option(
    '--use-tmpdir', is_flag=True,
    help='use a temporary directory to stage data')
@click.option(
    '--part', default=None, type=str,
    help=('the part of the file to process in the '
          'form `--part="<part>:<n_parts>"` - '
          'Note that parts are one-indexed.'))
@click.option(
    '--range', 'meds_range', default=None, type=str,
    help=(
        'the range of entries in the MEDS file to process - '
        'Note that this option is mutually exclusive with `--part`. '
        'Futher, it is specified using normal python slicing conventions, '
        'so that `--range="0:10"` is the first 10 entries in the file, etc.'))
@click.option(
    '--log-level', default='warning', type=str,
    help='python logging level')
def main(
        meds_files, config, output_path, seed, use_tmpdir, part, log_level,
        meds_range):
    """Run metdetect on MEDS_FILES."""

    if part is not None and meds_range is not None:
        raise click.BadParameter(
            'You must specify only one of `--part` and `--range`')

    with open(config, 'r') as fp:
        _config = yaml.load(fp.read(), Loader=yaml.Loader)

    logging.basicConfig(
        stream=sys.stdout, level=getattr(logging, log_level.upper()))

    # init meds once here
    meds_list = [NGMixMEDS(fname) for fname in meds_files]
    mbmeds = MultiBandNGMixMEDS(meds_list)

    if part is not None:
        part, n_parts = part.split(':')
        part = int(part)
        n_parts = int(n_parts)
        start, num = _get_part_ranges(part, n_parts, mbmeds.size)
    elif meds_range is not None:
        start, end_plus_one, num = _split_range(meds_range)
    else:
        start = 0
        num = mbmeds.size

    def _call(output_file):
        run_metadetect(
            config=_config,
            output_file=output_file,
            multiband_meds=mbmeds,
            seed=seed,
            start=start,
            num=num)

    bname = _make_output_filename(meds_files[0], part, meds_range)
    filename = expandpath(os.path.join(output_path, bname))

    makedir_fromfile(filename)

    if use_tmpdir:
        with tempfile.TemporaryDirectory() as tmpdir:
            with StagedOutFile(filename, tmpdir) as sf:
                _call(sf.path)
    else:
        _call(filename)

    print('output file:', filename, flush=True)


if __name__ == '__main__':
    main()

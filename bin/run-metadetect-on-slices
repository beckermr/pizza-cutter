#!/usr/bin/env python
import os
import sys
import logging
import tempfile

import click
import yaml

from pizza_cutter.metadetect.run_metadetect import run_metadetect
from ngmix.medsreaders import MultiBandNGMixMEDS, NGMixMEDS
from pizza_cutter.files import StagedOutFile


def _make_output_filename(meds_fname, part):
    fname = os.path.basename(meds_fname)
    fname = fname.replace('.fz', '').replace('.fits', '')
    # remove the band - always comes after the tilename by convention
    items = fname.split('_')
    fname = '_'.join(items[0:1] + items[2:])
    tail = '-metadetect-output-part%04d.fits' % part
    return fname + tail


@click.command()
@click.argument('meds_files', nargs=-1)
@click.option(
    '--config', default=None, type=str,
    help='configuration file')
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the outputs')
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG')
@click.option(
    '--use-tmpdir', is_flag=True,
    help='use a temporary directory to stage data')
@click.option(
    '--part', default='1:1', type=str,
    help=('the part of the file to process in the '
          'form `--part="<part>:<n_parts>"` - '
          'Note that parts are one-indexed.'))
@click.option(
    '--log-level', default='warning', type=str,
    help='python logging level')
def main(meds_files, config, output_path, seed, use_tmpdir, part, log_level):
    """Run metdetect on MEDS_FILES."""
    with open(config, 'r') as fp:
        _config = yaml.load(fp.read())

    logging.basicConfig(
        stream=sys.stdout, level=getattr(logging, log_level.upper()))

    # init meds once here
    meds_list = [NGMixMEDS(fname) for fname in meds_files]
    mbmeds = MultiBandNGMixMEDS(meds_list)
    part, n_parts = part.split(':')

    def _call(output_file):
        run_metadetect(
            config=_config,
            output_file=output_file,
            multiband_meds=mbmeds,
            seed=seed,
            part=int(part),
            n_parts=int(n_parts))

    filename = os.path.join(
        output_path,
        _make_output_filename(meds_files[0], part))

    if use_tmpdir:
        with tempfile.TemporaryDirectory() as tmpdir:
            with StagedOutFile(filename, tmpdir) as sf:
                _call(sf.path)
    else:
        _call(filename)


if __name__ == '__main__':
    main()

#!/usr/bin/env python
"""
run metadetect on a slice file
"""
import os
import shutil
import sys
import logging
import tempfile

import click
import yaml

from pizza_cutter.metadetect.run_metadetect import (
    run_metadetect,
    _get_part_ranges,
    make_output_filename,
    split_range,
)
from ngmix.medsreaders import MultiBandNGMixMEDS, NGMixMEDS
from pizza_cutter.files import StagedOutFile, makedir_fromfile


def _process(*,
             meds_files,
             config,
             output_path,
             seed,
             part,
             log_level,
             meds_range,
             tmpdir):

    with open(config, 'r') as fp:
        _config = yaml.load(fp.read(), Loader=yaml.Loader)

    logging.basicConfig(
        stream=sys.stdout, level=getattr(logging, log_level.upper()))

    meds_list = []
    for f in meds_files:

        if tmpdir is not None:
            usename = os.path.join(tmpdir, os.path.basename(f))
            print('copying %s -> %s' % (f, usename))
            shutil.copy(f, tmpdir)
        else:
            usename = f

        m = NGMixMEDS(usename)
        meds_list.append(m)

    mbmeds = MultiBandNGMixMEDS(meds_list)

    if part is not None:
        part, n_parts = part.split(':')
        part = int(part)
        n_parts = int(n_parts)
        start, num = _get_part_ranges(part, n_parts, mbmeds.size)
    elif meds_range is not None:
        start, end_plus_one, num = split_range(meds_range)
    else:
        start = 0
        num = mbmeds.size

    def _call(output_file):
        run_metadetect(
            config=_config,
            output_file=output_file,
            multiband_meds=mbmeds,
            seed=seed,
            start=start,
            num=num,
        )

    filename = make_output_filename(
        output_path,
        meds_files[0],
        part,
        meds_range,
    )

    makedir_fromfile(filename)
    print('output file:', filename, flush=True)

    # if tmpdir is none, no staging or local dir is used
    with StagedOutFile(filename, tmpdir=tmpdir) as sf:
        _call(sf.path)

    print('output is in:', filename, flush=True)


@click.command()
@click.argument('meds_files', nargs=-1)
@click.option(
    '--config', default=None, type=str,
    help='configuration file',
    required=True)
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the outputs')
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG',
    required=True)
@click.option(
    '--use-tmpdir', is_flag=True,
    help='use a temporary directory to stage data')
@click.option(
    '--part', default=None, type=str,
    help=('the part of the file to process in the '
          'form `--part="<part>:<n_parts>"` - '
          'Note that parts are one-indexed.'))
@click.option(
    '--range', 'meds_range', default=None, type=str,
    help=(
        'the range of entries in the MEDS file to process - '
        'Note that this option is mutually exclusive with `--part`. '
        'Futher, it is specified using normal python slicing conventions, '
        'so that `--range="0:10"` is the first 10 entries in the file, etc.'))
@click.option(
    '--log-level', default='warning', type=str,
    help='python logging level')
def main(
        meds_files, config, output_path, seed, use_tmpdir, part, log_level,
        meds_range):
    """Run metdetect on MEDS_FILES."""

    if part is not None and meds_range is not None:
        raise click.BadParameter(
            'You must specify only one of `--part` and `--range`')

    def _call_process(*, tmpdir):
        _process(
            meds_files=meds_files,
            config=config,
            output_path=output_path,
            seed=seed,
            part=part,
            log_level=log_level,
            meds_range=meds_range,
            tmpdir=tmpdir,
           )

    if use_tmpdir:
        with tempfile.TemporaryDirectory() as tmpdir:
            _call_process(tmpdir=tmpdir)
    else:
        _call_process(tmpdir=None)


if __name__ == '__main__':
    main()

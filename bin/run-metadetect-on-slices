#!/usr/bin/env python
import os
import sys
import logging

import click
import yaml

from pizza_cutter.metadetect.run_metadetect import run_metadetect
from ngmix.medsreaders import MultiBandNGMixMEDS, NGMixMEDS


def _make_output_filename(meds_fname):
    fname = os.path.basename(meds_fname)
    fname = fname.replace('.fz', '').replace('.fits', '')
    # remove the band - always comes after the tilename by convention
    items = fname.split('_')
    fname = '_'.join(items[0:1] + items[2:])
    return fname + '-metadetect-output.fits'


@click.command()
@click.argument('meds_files', nargs=-1)
@click.option(
    '--config', default=None, type=str,
    help='configuration file')
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the outputs')
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG')
@click.option(
    '--log-level', default='warning', type=str,
    help='python logging level')
def main(meds_files, config, output_path, seed, log_level):
    """Run metdetect on MEDS_FILES."""
    with open(config, 'r') as fp:
        _config = yaml.load(fp.read())

    logging.basicConfig(
        stream=sys.stdout, level=getattr(logging, log_level.upper()))

    # init meds once here
    meds_list = [NGMixMEDS(fname) for fname in meds_files]
    mbmeds = MultiBandNGMixMEDS(meds_list)

    fname = os.path.join(
        output_path,
        _make_output_filename(meds_files[0]))

    run_metadetect(
        config=_config,
        output_fname=fname,
        multiband_meds=mbmeds,
        seed=seed)


if __name__ == '__main__':
    main()

#!/usr/bin/env python
import os
import sys
import logging

import click
import yaml
from pizza_cutter.des_pizza_cutter import (
    make_des_pizza_slices,
    load_info,
)


@click.command()
@click.option(
    '--config', default=None, type=str,
    help='configuration file',
    required=True)
@click.option(
    '--info', default=None, type=str,
    help='the path to the coadd information for processing',
    required=True)
@click.option(
    '--tag', default=None, type=str,
    help='an extra tag to attach to the filename if desired')
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the MEDS file',
    required=True)
@click.option(
    '--log-level', default='warning', type=str,
    help=(
        'python logging level [one of critical error, '
        'warning, info, or debug]'))
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG',
    required=True)
@click.option(
    '--use-tmpdir', is_flag=True,
    help='use a temporary directory to stage data')
def main(
        config, info, tag, output_path, log_level, seed,
        use_tmpdir):
    """Create a metadetection MEDS file from a DES coadd tile."""

    info_path = info

    logging.basicConfig(stream=sys.stdout)
    logging.getLogger('pizza_cutter').setLevel(
        getattr(logging, log_level.upper()))

    with open(config, 'r') as fp:
        _config = fp.read()
    cfg = yaml.load(_config, Loader=yaml.Loader)

    tile_info = load_info(path=info_path)

    print('tilename:', tile_info['tilename'], flush=True)
    print('band:', tile_info['band'], flush=True)

    sname = os.path.basename(config).replace('.yaml', '')
    if tag is not None:
        sname = '-'.join([sname, tag])
    meds_path = os.path.join(
        output_path,
        "%s_%s_%s_meds-pizza-slices.fits" % (
            tile_info['tilename'],
            tile_info['band'],
            sname))
    print('output meds file:', meds_path, flush=True)

    print('making pizza slices!', flush=True)
    make_des_pizza_slices(
        use_tmpdir=use_tmpdir,
        config=_config,
        meds_path=meds_path,
        info=tile_info,
        fpack_pars=cfg.get('fpack_pars', None),
        seed=seed,
        coadd_config=cfg['coadd'],
        single_epoch_config=cfg['single_epoch'])


if __name__ == '__main__':
    main()

#!/usr/bin/env python
import os
import sys
import logging

import click
import jinja2
import yaml
from pizza_cutter.des_pizza_cutter import (
    make_des_pizza_slices, get_des_y3_coadd_tile_info)


@click.command()
@click.option(
    '--config', default=None, type=str,
    help='configuration file')
@click.option(
    '--tilename', default=None, type=str,
    help='tile to process')
@click.option(
    '--band', default=None, type=str,
    help='band to process')
@click.option(
    '--tag', default=None, type=str,
    help='an extra tag to attach to the filename if desired')
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the MEDS file')
@click.option(
    '--log-level', default='warning', type=str,
    help='python logging level')
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG')
def main(config, tilename, band, tag, output_path, log_level, seed):
    """Create a metadetection MEDS file from a DES coadd tile."""

    logging.basicConfig(stream=sys.stdout)
    # , level=getattr(logging, log_level.upper()))
    logging.getLogger('pizza_cutter').setLevel(
        getattr(logging, log_level.upper()))

    print('tilename:', tilename, flush=True)
    print('band:', band, flush=True)
    with open(config, 'r') as fp:
        _config = fp.read()
    cfg = yaml.load(
        jinja2.Template(_config).render(tilename=tilename, band=band))

    sname = os.path.basename(config).replace('.yaml', '')
    if tag is not None:
        sname = '-'.join([sname, tag])
    meds_path = os.path.join(
        output_path,
        "%s_%s_%s_meds-pizza-slices.fits" % (
            tilename,
            band,
            sname))
    print('output meds file:', meds_path, flush=True)

    print('querying DESDM for tile information...', flush=True)
    info, coadd = get_des_y3_coadd_tile_info(
        tilename=tilename,
        band=band,
        campaign=cfg['campaign'],
        medsconf=sname)

    print('downloading files...', flush=True)
    coadd.download()

    make_des_pizza_slices(
        config=_config,
        central_size=cfg['central_size'],
        buffer_size=cfg['buffer_size'],
        meds_path=meds_path,
        info=info,
        fpack_pars=cfg.get('fpack_pars', None),
        seed=seed,
        reject_outliers=cfg['reject_outliers'],
        symmetrize_masking=cfg['symmetrize_masking'],
        coadding_weight=cfg['coadding_weight'],
        coadding_interp=cfg['coadding_interp'],
        noise_interp_flags=sum(cfg['noise_interp_flags']),
        se_interp_flags=sum(cfg['se_interp_flags']),
        bad_image_flags=sum(cfg['bad_image_flags']),
        max_masked_fraction=cfg['max_masked_fraction'],
        psf_box_size=cfg['psf_box_size'])


if __name__ == '__main__':
    main()

#!/usr/bin/env python
import os
import sys
import logging
import tempfile

import click
import yaml
from pizza_cutter.des_pizza_cutter import (
    make_des_pizza_slices, load_objects_into_info)


def go(
    config, info, tag, output_path, log_level, seed, tmpdir,
    chunk_size, max_workers,
):
    """Create a metadetection MEDS file from a DES coadd tile."""

    logging.basicConfig(stream=sys.stdout)
    logging.getLogger('pizza_cutter').setLevel(
        getattr(logging, log_level.upper()))

    with open(config, 'r') as fp:
        _config = fp.read()
    cfg = yaml.load(_config, Loader=yaml.Loader)

    with open(info, 'r') as fp:
        info = yaml.load(fp, Loader=yaml.Loader)

    print('tilename:', info['tilename'], flush=True)
    print('band:', info['band'], flush=True)

    # this loads all of the data we need into the info dict
    load_objects_into_info(info=info)

    sname = os.path.basename(config).replace('.yaml', '')
    if tag is not None:
        sname = '-'.join([sname, tag])
    meds_path = os.path.join(
        output_path,
        "%s_%s_%s_meds-pizza-slices.fits" % (
            info['tilename'],
            info['band'],
            sname))
    print('output meds file:', meds_path, flush=True)

    print('making pizza slices!', flush=True)
    make_des_pizza_slices(
        tmpdir=tmpdir,
        config=_config,
        meds_path=meds_path,
        info=info,
        fpack_pars=cfg.get('fpack_pars', None),
        seed=seed,
        coadd_config=cfg['coadd'],
        single_epoch_config=cfg['single_epoch'],
        max_workers=max_workers,
        chunk_size=chunk_size,
    )


@click.command()
@click.option('--config', type=str, help='configuration file', required=True)
@click.option(
    '--info', type=str,
    help='the path to the coadd information for processing',
    required=True,
)
@click.option(
    '--tag', default=None, type=str,
    help='an extra tag to attach to the filename if desired',
)
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the MEDS file',
)
@click.option(
    '--log-level', default='warning', type=str,
    help=(
        'python logging level [one of critical error, '
        'warning, info, or debug]'
    ),
)
@click.option('--seed', type=int, help='seed for the RNG', required=True)
@click.option(
    '--use-tmpdir', is_flag=True,
    help=(
        'use a temporary directory to stage data. set --tmpdir to specify the '
        'name of the temporary directory, otherwise one will be created'
    ),
)
@click.option(
    '--tmpdir', type=str, default=None,
    help=(
        'the name of the temporary directory to use. if passed without '
        '--use-tmpdir, it will still be used.'
    ),
)
@click.option(
    '--chunk-size', type=int, default=1,
    help=(
        'The size of each chunk of slices processed. Making this smaller consumes '
        'less memory but will cost more CPU time when running the code in parallel.'
    ),
)
@click.option(
    '--max-workers', type=int, default=1,
    help=(
        'The number of processes to use for making pizza slices. A value of 0 '
        'uses the system default.'
    ),
)
def main(
        config, info, tag, output_path, log_level, seed,
        use_tmpdir, tmpdir, chunk_size, max_workers,
):
    """Create a metadetection MEDS file from a DES coadd tile."""

    if max_workers <= 0:
        max_workers = None

    def _call(_tmpdir):
        go(
            config, info, tag, output_path, log_level, seed, _tmpdir,
            chunk_size, max_workers,
        )

    if use_tmpdir and tmpdir is None:
        tmpdir = tempfile.TemporaryDirectory().name

    if tmpdir is not None:
        try:
            _call(tmpdir)
        finally:
            os.system("rm -rf %s" % os.path.join(tmpdir, "*"))
    else:
        _call(tmpdir)


if __name__ == '__main__':
    main()

#!/usr/bin/env python
import os
import click
import yaml
from pizza_cutter.coadd_sim_slicer.slicer import make_meds_pizza_slices


@click.command()
@click.option(
    '--config', default=None, type=str,
    help='configuration file')
@click.option(
    '--sim-path', default=None, type=str,
    help='path to directory that holds the simulations')
@click.option(
    '--tilename', default=None, type=str,
    help='tile to process')
@click.option(
    '--band', default=None, type=str,
    help='band to process')
@click.option(
    '--tag', default=None, type=str,
    help='an extra tag to attach to the filename if desired')
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the MEDS file')
def main(config, sim_path, tilename, band, tag, output_path):
    """Create a metadetection MEDS file from a coadd simulation."""
    with open(config, 'r') as fp:
        _config = fp.read()
    try:
        _config = _config.format(tilename=tilename, band=band)
    except Exception:
        pass
    cfg = yaml.load(_config)

    sname = os.path.basename(config).replace('.yaml', '')
    if tag is not None:
        sname = '-'.join([sname, tag])
    meds_path = os.path.join(
        output_path,
        "%s_%s_%s_meds-pizza-slices.fits" % (
            tilename,
            band,
            sname))

    make_meds_pizza_slices(
        config=_config,
        central_size=cfg['central_size'],
        buffer_size=cfg['buffer_size'],
        meds_path=meds_path,
        image_path=os.path.join(sim_path, cfg['image_path']),
        image_ext=cfg['image_ext'],
        weight_path=os.path.join(sim_path, cfg['weight_path']),
        weight_ext=cfg['weight_ext'],
        bmask_path=os.path.join(sim_path, cfg['bmask_path']),
        bmask_ext=cfg['bmask_ext'],
        seg_path=(
            None
            if cfg.get('seg_path', None) is None
            else os.path.join(sim_path, cfg['seg_path'])),
        seg_ext=cfg.get('seg_ext', None),
        bkg_path=(
            None
            if cfg.get('bkg_path', None) is None
            else os.path.join(sim_path, cfg['bkg_path'])),
        bkg_ext=cfg.get('bkg_ext', None),
        psf=os.path.join(sim_path, cfg['psf']),
        fpack_pars=cfg.get('fpack_pars', None),
        seed=cfg['seed'])


if __name__ == '__main__':
    main()

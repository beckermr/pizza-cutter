#!/usr/bin/env python
import os
import sys
import logging
import tempfile
import functools

import jinja2
import click
import yaml

from pizza_cutter.metadetect.run_metadetect import run_metadetect
from ngmix.medsreaders import MultiBandNGMixMEDS
from pizza_cutter.coadd_sim_slicer.medsreader import CoaddSimSliceMEDS
from pizza_cutter.coadd_sim_slicer.mask_sim import (
    interpolate_ngmix_multiband_obs)
from pizza_cutter.files import StagedOutFile


def _make_masking_func(coadd_config):
    with open(coadd_config, 'r') as fp:
        _config = fp.read()
    cfg = yaml.load(
        jinja2.Template(_config).render(tilename='blah1', band='blah2'))

    if 'masking_config' in cfg:
        cfg = cfg['masking_config']

        mfunc = functools.partial(
            interpolate_ngmix_multiband_obs,
            se_interp_flags=sum(cfg['se_interp_flags']),
            noise_interp_flags=sum(cfg['noise_interp_flags']),
            symmetrize_masking=cfg['symmetrize_masking'])
        return mfunc
    else:
        return None


def _build_meds_list(*, tilename, band, sim_path, coadd_config, seed):
    with open(coadd_config, 'r') as fp:
        _config = fp.read()

    mlist = []
    for i, b in enumerate(band.split(',')):
        print('making meds interface for band:', b, flush=True)
        cfg = yaml.load(
            jinja2.Template(_config).render(tilename=tilename, band=b))

        mlist.append(
            CoaddSimSliceMEDS(
                central_size=cfg['central_size'],
                buffer_size=cfg['buffer_size'],
                image_path=os.path.join(sim_path, cfg['image_path']),
                image_ext=cfg['image_ext'],
                weight_path=os.path.join(sim_path, cfg['weight_path']),
                weight_ext=cfg['weight_ext'],
                bmask_path=os.path.join(sim_path, cfg['bmask_path']),
                bmask_ext=cfg['bmask_ext'],
                seg_path=(
                    None
                    if cfg.get('seg_path', None) is None
                    else os.path.join(sim_path, cfg['seg_path'])),
                seg_ext=cfg.get('seg_ext', None),
                bkg_path=(
                    None
                    if cfg.get('bkg_path', None) is None
                    else os.path.join(sim_path, cfg['bkg_path'])),
                bkg_ext=cfg.get('bkg_ext', None),
                psf=(
                    os.path.join(sim_path, cfg['psf'])
                    if isinstance(cfg['psf'], str)
                    else cfg['psf']),
                seed=seed + i))
    return mlist


@click.command()
@click.option(
    '--metadetect-config', default=None, type=str,
    help='metadetect configuration file',
    required=True)
@click.option(
    '--coadd-config', default=None, type=str,
    help='coadd sim configuration file',
    required=True)
@click.option(
    '--output-path', default='.', type=str,
    help='path to write the outputs')
@click.option(
    '--sim-path', default=None, type=str,
    help='path to directory that holds the simulations',
    required=True)
@click.option(
    '--tilename', default=None, type=str,
    help='tile to process',
    required=True)
@click.option(
    '--band', default=None, type=str,
    help='band(s) to process - list multiple with commas',
    required=True)
@click.option(
    '--tag', default=None, type=str,
    help='an extra tag to attach to the filename if desired')
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG',
    required=True)
@click.option(
    '--log-level', default='warning', type=str,
    help='python logging level')
@click.option(
    '--part', default='1:1', type=str,
    help=('the part of the file to process in the '
          'form `--part="<part>:<n_parts>"` - '
          'Note that parts are one-indexed.'))
@click.option(
    '--use-tmpdir', is_flag=True,
    help='use a temporary directory to stage data')
def main(
        metadetect_config, coadd_config, output_path, sim_path,
        tilename, band, tag, seed, log_level, part, use_tmpdir):
    """Run metdetect on MEDS_FILES."""
    with open(metadetect_config, 'r') as fp:
        _metadetect_config = yaml.load(fp.read())

    logging.basicConfig(
        stream=sys.stdout, level=getattr(logging, log_level.upper()))

    part, n_parts = part.split(':')
    part = int(part)
    n_parts = int(n_parts)

    sname = os.path.basename(coadd_config).replace('.yaml', '')
    if tag is not None:
        sname = '-'.join([sname, tag])
    filename = os.path.join(
        output_path,
        "%s_%s_meds-pizza-slices-metadetect-output-part%04d.fits" % (
            tilename, sname, part))

    mlist = _build_meds_list(
        tilename=tilename,
        band=band,
        sim_path=sim_path,
        coadd_config=coadd_config,
        seed=seed)
    mbmeds = MultiBandNGMixMEDS(mlist)

    def _call(fname):
        run_metadetect(
            config=_metadetect_config,
            output_file=fname,
            multiband_meds=mbmeds,
            seed=seed,
            part=part,
            n_parts=n_parts,
            preprocessing_function=_make_masking_func(coadd_config))

    if use_tmpdir:
        with tempfile.TemporaryDirectory() as tmpdir:
            with StagedOutFile(filename, tmpdir) as sf:
                _call(sf.path)
    else:
        _call(filename)


if __name__ == '__main__':
    main()

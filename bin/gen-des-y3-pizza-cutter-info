#!/usr/bin/env python
import os
import sys
import logging

import click
import jinja2
import yaml
from pizza_cutter.des_pizza_cutter import get_des_y3_coadd_tile_info
from pizza_cutter.files import makedir_fromfile


@click.command()
@click.option(
    '--config', default=None, type=str,
    help='configuration file',
    required=True)
@click.option(
    '--tilename', default=None, type=str,
    help='tile to process',
    required=True)
@click.option(
    '--band', default=None, type=str,
    help='band to process',
    required=True)
@click.option(
    '--log-level', default='warning', type=str,
    help=(
        'python logging level [one of critical error, '
        'warning, info, or debug]'))
def main(config, tilename, band, log_level):
    """Generate the information needed for pizza slicing a DES Y3 coadd tile.
    """

    logging.basicConfig(stream=sys.stdout)
    logging.getLogger('pizza_cutter').setLevel(
        getattr(logging, log_level.upper()))

    print('tilename:', tilename, flush=True)
    print('band:', band, flush=True)
    with open(config, 'r') as fp:
        _config = fp.read()
    cfg = yaml.load(
        jinja2.Template(_config).render(tilename=tilename, band=band),
        Loader=yaml.Loader)

    sname = os.path.basename(config).replace('.yaml', '')

    output_path = os.path.join(
        os.environ['MEDS_DIR'],
        sname,
        'pizza_cutter_info',
        '%s_%s_pizza_cutter_info.yaml' % (tilename, band)
    )

    print('tile info file: "%s"' % output_path, flush=True)

    print('querying DESDM for tile information...', flush=True)
    info = get_des_y3_coadd_tile_info(
        tilename=tilename,
        band=band,
        campaign=cfg['campaign'],
        medsconf=sname,
        piff_run=cfg.get('piff_run', None))

    print('dumping tile information...', flush=True)
    makedir_fromfile(output_path)
    with open(output_path, 'w') as fp:
        yaml.dump(info, fp)


if __name__ == '__main__':
    main()
